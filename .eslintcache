[{"D:\\TESTER-2020\\st32020group12_v1.2\\src\\index.js":"1","D:\\TESTER-2020\\st32020group12_v1.2\\src\\App.js":"2","D:\\TESTER-2020\\st32020group12_v1.2\\src\\components\\Footer.js":"3","D:\\TESTER-2020\\st32020group12_v1.2\\src\\components\\Header.js":"4","D:\\TESTER-2020\\st32020group12_v1.2\\src\\firebase\\Firebase.js":"5","D:\\TESTER-2020\\st32020group12_v1.2\\src\\Pages\\Home\\About.js":"6","D:\\TESTER-2020\\st32020group12_v1.2\\src\\Pages\\Main\\Main.js":"7"},{"size":264,"mtime":1604152106289,"results":"8","hashOfConfig":"9"},{"size":1424,"mtime":1611725960571,"results":"10","hashOfConfig":"9"},{"size":172,"mtime":1603455546469,"results":"11","hashOfConfig":"9"},{"size":13130,"mtime":1604730140368,"results":"12","hashOfConfig":"9"},{"size":560,"mtime":1603956927813,"results":"13","hashOfConfig":"9"},{"size":3628,"mtime":1611731596478,"results":"14","hashOfConfig":"9"},{"size":24682,"mtime":1611726914303,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"12xiy7f",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"D:\\TESTER-2020\\st32020group12_v1.2\\src\\index.js",[],["34","35"],"D:\\TESTER-2020\\st32020group12_v1.2\\src\\App.js",["36","37","38"],"import React, { useState } from \"react\";\nimport {\n  HashRouter,\n  Redirect,\n  Route,\n  Switch,\n  useLocation,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { Footer } from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport { About } from \"./Pages/Home/About\";\nimport { Main } from \"./Pages/Main/Main\";\n\nfunction App() {\n  let location = useLocation();\n  const [showAbout, setShowAbout] = useState(false);\n  const [isAuth, setIsAuth] = useState(\n    JSON.parse(localStorage.getItem(\"isAuth\"))\n  );\n  const PrivateRoute = ({ children, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={({ location }) =>\n          isAuth ? (\n            children\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/home\",\n                state: { from: location },\n              }}\n            />\n          )\n        }\n      />\n    );\n  };\n\n  return (\n    <HashRouter>\n      <div className=\"container\">\n        <Redirect\n          to={{\n            pathname: \"/room-management\",\n            state: { from: location },\n          }}\n        />\n        <Header />\n        <Switch>\n          <Route path=\"/home\" exact={true}>\n            <About />\n          </Route>\n          <PrivateRoute path=\"/room-management\">\n            <Main />\n          </PrivateRoute>\n        </Switch>\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","D:\\TESTER-2020\\st32020group12_v1.2\\src\\components\\Footer.js",[],"D:\\TESTER-2020\\st32020group12_v1.2\\src\\components\\Header.js",["39","40","41","42","43","44","45","46","47"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from '../firebase/Firebase'\r\nimport {\r\n  UserOutlined,\r\n  SettingFilled,\r\n  LogoutOutlined,\r\n  LockOutlined,QuestionCircleOutlined ,FormOutlined,FacebookFilled\r\n} from \"@ant-design/icons\";\r\nimport { Menu, Modal, Form, Input, Button, Checkbox, Row, notification, message, Descriptions, Col,Image } from \"antd\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nconst { SubMenu } = Menu;\r\nconst Header = () => {\r\n  const [visibleAbout,setVisibleAbout] = useState(false)\r\n  const [errorPass,setErrorPass] = useState('')\r\n  const [idOwner,setIdOwner] = useState( JSON.parse(localStorage.getItem(\"idOwner\"))\r\n  )\r\n  const [visiblePass,setVisiblePass] = useState(false)\r\n  const [isLogin, setIsLogin] = useState(JSON.parse(localStorage.getItem('isAuth')));\r\n  const [owner,setOwner] = useState(JSON.parse(localStorage.getItem('owner')))\r\n  const [dataUser, setDataUser] = useState([]);\r\n  const [visible, setVisible] = useState(false);\r\n  const [isHas, setHas] = useState(true);\r\n  const [error,setEror] = useState('')\r\n  const [errorLogin,setErorLogin] = useState('')\r\nconst s4 = () => {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n};\r\nconst gID = () => {\r\n  return s4()+'-'+s4();\r\n};\r\n  const logout = () => {\r\n    setIsLogin(false);\r\n    localStorage.setItem('isAuth',false)\r\n    window.location.reload()\r\n  };\r\n  const login = () => {\r\n    setVisible(true);\r\n  };\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n  const register = () => {\r\n    setHas(false);\r\n  };\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async () => {\r\n      const db = firebase.firestore()\r\n      db.collection('users').onSnapshot((data)=> { \r\n        setDataUser(data.docs.map(doc => ({\r\n          ...doc.data(), \r\n          id: doc.id\r\n        })))\r\n      })\r\n    }\r\n   fetchData()\r\n  }, [])\r\n\r\n  const onLogin = (values) => {\r\n    //console.log(values);\r\n    let index = dataUser.findIndex((item) => item.username === values.username);\r\n    if (index === -1) {\r\n      setErorLogin('Username is not exist !')\r\n    } else if (values.password !== dataUser[index].password) {\r\n      setErorLogin('Error password !')\r\n    } else if (values.username === dataUser[index].username && values.password === dataUser[index].password){\r\n       localStorage.setItem('isAuth',true)\r\n    setIsLogin(true)\r\n    setVisible(false)\r\n    setErorLogin('')\r\n    window.location.reload()\r\n    localStorage.setItem('owner',JSON.stringify(dataUser[index].fullName))\r\n    localStorage.setItem('idOwner',JSON.stringify(dataUser[index].id))\r\n    }\r\n   \r\n  };\r\n  const onRegister = (values)=> {\r\n    //console.log(values)\r\n    let index = dataUser.findIndex((item) => item.username === values.username);\r\n    if (values.password !== values.passwordConfirm) {\r\n      setEror('Password not match')\r\n    } else if (index!=-1) {\r\n      setEror('Username is exist !')\r\n    } else if (values.password.length < 8) {\r\n      setEror('Username and password should be 8 characters !')\r\n    } else if (values.username.length < 6) {\r\n      setEror('Username should be 6 characters !')\r\n    } else {\r\n      setEror('')\r\n      setHas(true)\r\n    const db = firebase.firestore();\r\n    db.collection('users').add({\r\n      fullName: values.fullName,\r\n      key: gID(),\r\n      username:values.username,\r\n      password:values.password,\r\n    })\r\n    }\r\n   \r\n  }\r\n  const onchangePass = (values) => {\r\n    //console.log(values)\r\n    let index = dataUser.findIndex((item) => item.id === idOwner);\r\n    if (values.oldpass !== dataUser[index].password) {\r\n      setErrorPass('Old password not correct !')\r\n      message.error('Old password not correct !',1)\r\n    } else if (values.newpass !== values.newpassConfirm) {\r\n      setErrorPass('Password not match')\r\n      message.error('Password not match',1)\r\n    } else if (values.newpass.length < 8) {\r\n      setErrorPass('Password should be 8 characters !')\r\n      message.error('Password should be 8 characters !',1)\r\n    } else {\r\n      setErrorPass('')\r\n      const db = firebase.firestore();\r\n      db.collection('users').doc(idOwner).set({\r\n        fullName: dataUser[index].fullName,\r\n        key: dataUser[index].key,\r\n        username:dataUser[index].username,\r\n        password:values.newpass\r\n    }).then(()=> {\r\n      \r\n      message.success(\r\n        'Change password success !', 2\r\n      )\r\n      setVisiblePass(false)\r\n      }\r\n      )\r\n    }\r\n  }\r\n  const LoginForm = () => {\r\n    return (\r\n      <Form name=\"normal_login\" className=\"login-form\" onFinish={onLogin}>\r\n         <Row style={{color:'red',marginBottom:20}}>{errorLogin}</Row>\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Username!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Username\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item style={{ float: \"right\" }}>\r\n          <Link to='' className=\"login-form-forgot\">Forgot password</Link>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            style={{ marginRight: 10 }}\r\n          >\r\n            Log in\r\n          </Button>\r\n          Or <Link to='' onClick={register}>register now!</Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  };\r\n  const RegisterForm = () => {\r\n    return (\r\n      <Form name=\"normal_login\" className=\"login-form\" onFinish={onRegister}>\r\n        <Row style={{color:'red',marginBottom:20}}>{error}</Row>\r\n\r\n        <Form.Item\r\n          name=\"fullName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Fullname!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Fullname\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Username!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Username\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"passwordConfirm\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Password Confirm!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Password Confirm\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item style={{ float: \"right\" }}>\r\n          <Link\r\n          to=''\r\n            className=\"login-form-forgot\"\r\n            onClick={() => {\r\n              setHas(true);\r\n            }}\r\n          >\r\n            Already have an account?\r\n          </Link>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            style={{ marginRight: 10 }}\r\n          >\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  };\r\n  const ChangePassForm = () => {\r\n    return (\r\n    <Form name=\"normal_login\" className=\"login-form\" onFinish={onchangePass}>\r\n        <Row style={{color:'red',marginBottom:20}}>{errorPass}</Row>\r\n        <Form.Item\r\n          name=\"oldpass\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input new password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Old password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"newpass\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input new Password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"New password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"newpassConfirm\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input new Password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Confirm password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            style={{ marginRight: 10 }}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            style={{ marginRight: 10 }}\r\n          >\r\n          Cancel\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>)\r\n  }\r\n  const AboutForm = () => {\r\n    return (\r\n      <Row>\r\n      <Col span={14}>\r\n     <Descriptions column={1}>\r\n       <Descriptions.Item label='Company name'>Nong Lam University</Descriptions.Item>\r\n       <Descriptions.Item label='Developer'>Ha Ngoc Kien</Descriptions.Item>\r\n       <Descriptions.Item label='Version'>st01-2020 YataomeApp</Descriptions.Item>\r\n       <Descriptions.Item label='Contact me '>\r\n         <a href=\"https://www.facebook.com/hakien1402/\"><FacebookFilled />FB: HÀ KIÊN </a> <br/>\r\n         Email : hangockien99@gmail.com\r\n       </Descriptions.Item>\r\n     </Descriptions>\r\n     </Col>\r\n     <Col span={6} className='info'>\r\n     <Image\r\n            width={220}\r\n            src=\"https://scontent.fvca1-1.fna.fbcdn.net/v/t1.0-9/79451546_3058864351005230_4509966735998189568_o.jpg?_nc_cat=106&ccb=2&_nc_sid=09cbfe&_nc_ohc=O59O_uf-7V0AX_MG01r&_nc_ht=scontent.fvca1-1.fna&oh=b6d6d25efb2e3bf695154980216b05c1&oe=5FB78BBA\"\r\n          />\r\n     </Col>\r\n     </Row>\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      <Menu mode=\"horizontal\" className=\"menu-app\">\r\n        <Menu.Item style={{ marginLeft: 40 }}>\r\n         <Link to='/'> <strong>GROUP 12 ST-2020</strong></Link>\r\n        </Menu.Item>\r\n        {isLogin === true ? (\r\n          <SubMenu\r\n            icon={<UserOutlined />}\r\n            title={\"Welcome \" + owner}\r\n            style={{\r\n              float: \"right\",\r\n              marginRight: 50,\r\n              fontSize: 16,\r\n              fontWeight: 500,\r\n            }}\r\n          >\r\n            <Menu.Item icon={<QuestionCircleOutlined />} onClick={()=> setVisibleAbout(true)}>About us</Menu.Item>\r\n            <Menu.Item icon={<FormOutlined />} onClick={()=> setVisiblePass(true)} >Change password</Menu.Item>\r\n            <Menu.Item icon={<LogoutOutlined />} onClick={logout}>\r\n              Log Out\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        ) : (\r\n          <Menu.Item\r\n            icon={<UserOutlined />}\r\n            style={{\r\n              float: \"right\",\r\n              marginRight: 50,\r\n              fontSize: 16,\r\n              fontWeight: 500,\r\n            }}\r\n            onClick={login}\r\n          >\r\n            Sign In\r\n          </Menu.Item>\r\n        )}\r\n      </Menu>\r\n      {/* Form */}\r\n      <Modal\r\n        title={isHas === true ? \"Sign In\" : \"Sign Up\"}\r\n        visible={visible}\r\n        width=\"400px\"\r\n        footer=\"\"\r\n        onCancel={handleCancel}\r\n      >\r\n        {isHas === true ? <LoginForm /> : <RegisterForm />}\r\n      </Modal>\r\n      <Modal\r\n        title='About'\r\n        visible={visibleAbout}\r\n            footer=''\r\n        width=\"700px\"\r\n        onOk={()=>setVisibleAbout(false)}\r\n        onCancel={()=> setVisibleAbout(false)}\r\n       \r\n      >\r\n        <AboutForm/>\r\n      </Modal>\r\n      <Modal\r\n        title='Change pass'\r\n        visible={visiblePass}\r\n        footer=''\r\n        width=\"400px\"\r\n        onCancel={()=> setVisiblePass(false)}\r\n       \r\n      >\r\n       <ChangePassForm/>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\TESTER-2020\\st32020group12_v1.2\\src\\firebase\\Firebase.js",[],"D:\\TESTER-2020\\st32020group12_v1.2\\src\\Pages\\Home\\About.js",[],"D:\\TESTER-2020\\st32020group12_v1.2\\src\\Pages\\Main\\Main.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import {\r\n  BookOutlined,\r\n  CheckCircleTwoTone,\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  ExclamationCircleTwoTone,\r\n  EyeOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  Dropdown,\r\n  Empty,\r\n  Form,\r\n  Input,\r\n  Layout,\r\n  Menu,\r\n  message,\r\n  Modal,\r\n  Popconfirm,\r\n  Row,\r\n  Select,\r\n  Skeleton,\r\n  Space,\r\n  Switch,\r\n  Table,\r\n} from \"antd\";\r\nimport Moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport firebase from \"../../firebase/Firebase\";\r\nconst { Content } = Layout;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nexport const Main = () => {\r\n  const history = useHistory;\r\n  const [visible, setVisible] = useState(false);\r\n  const [visiblePop, setVisiblePop] = useState(false);\r\n  const [visibleDraw, setVisibleDraw] = useState(false);\r\n  const [dataShow, setDataShow] = useState([]);\r\n  const [dataLease, setDataLease] = useState([]);\r\n  const [dataEdit, setDataEdit] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [infoRoom, setInfoRoom] = useState([]);\r\n  const [isLease, setIsLease] = useState(false);\r\n  const [idOwner, setIdOwner] = useState(\r\n    JSON.parse(localStorage.getItem(\"idOwner\"))\r\n  );\r\n  const [member, setMember] = useState([]);\r\n  const [infoEdit, setInfoEdit] = useState([]);\r\n  const [isEditInfo, setIsEditInfo] = useState(false);\r\n  const [rooms, setRooms] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const dataFilter = rooms.filter((filterData) => {\r\n    return filterData.key.toLowerCase().includes(search.toLowerCase());\r\n  });\r\n  const orderFilter = async (value) => {\r\n    const db = firebase.firestore().collection(\"users\").doc(idOwner);\r\n\r\n    if (value == \"VIP\" || value == \"NORMAL\") {\r\n      db.collection(\"rooms\")\r\n        .where(\"type\", \"==\", value)\r\n        .onSnapshot((data) => {\r\n          setLoading(false);\r\n          setRooms(\r\n            data.docs.map((doc) => ({\r\n              ...doc.data(),\r\n              id: doc.id,\r\n            }))\r\n          );\r\n        });\r\n    } else if (value == \"true\") {\r\n      db.collection(\"rooms\")\r\n        .where(\"status\", \"==\", true)\r\n        .onSnapshot((data) => {\r\n          setLoading(false);\r\n          setRooms(\r\n            data.docs.map((doc) => ({\r\n              ...doc.data(),\r\n              id: doc.id,\r\n            }))\r\n          );\r\n        });\r\n    } else if (value == \"false\") {\r\n      db.collection(\"rooms\")\r\n        .where(\"status\", \"==\", false)\r\n        .onSnapshot((data) => {\r\n          setLoading(false);\r\n          setRooms(\r\n            data.docs.map((doc) => ({\r\n              ...doc.data(),\r\n              id: doc.id,\r\n            }))\r\n          );\r\n        });\r\n    } else {\r\n      db.collection(\"rooms\").onSnapshot((data) => {\r\n        setLoading(false);\r\n        setRooms(\r\n          data.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          }))\r\n        );\r\n      });\r\n    }\r\n  };\r\n  const s4 = () => {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n      .toString(16)\r\n      .substring(1);\r\n  };\r\n  useEffect(() => {\r\n    localStorage.setItem(\"idOwner\", JSON.stringify(idOwner));\r\n  }, [idOwner]);\r\n  const genid = () => {\r\n    return s4();\r\n  };\r\n\r\n  const onLease = (item) => {\r\n    //console.log(item)\r\n    setVisible(true);\r\n    setDataLease({\r\n      ...dataLease,\r\n      leaseAt: Moment(new Date()).format(\"DD/MM/YYYY\"),\r\n      type: item.type,\r\n      nameLease: item.nameLease,\r\n      id: item.id,\r\n      status: item.status,\r\n      key: item.key,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (rooms.length === 0) {\r\n      setLoading(true);\r\n    }\r\n    const fetchData = async () => {\r\n      const db = firebase.firestore();\r\n      await db\r\n        .collection(\"users\")\r\n        .doc(idOwner)\r\n        .collection(\"rooms\")\r\n        .onSnapshot((data) => {\r\n          setLoading(false);\r\n          setRooms(\r\n            data.docs.map((doc) => ({\r\n              ...doc.data(),\r\n              id: doc.id,\r\n            }))\r\n          );\r\n        });\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const onAddVip = () => {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\").doc(idOwner).collection(\"rooms\").add({\r\n      key: genid(),\r\n      nameLease: \"\",\r\n      type: \"VIP\",\r\n      status: false,\r\n      leaseAt: \"\",\r\n    });\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .onSnapshot((data) => {\r\n        setRooms(\r\n          data.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          }))\r\n        );\r\n      });\r\n  };\r\n  const onAddNormal = () => {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\").doc(idOwner).collection(\"rooms\").add({\r\n      key: s4(),\r\n      nameLease: \"\",\r\n      type: \"NORMAL\",\r\n      status: false,\r\n      leaseAt: \"\",\r\n    });\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .onSnapshot((data) => {\r\n        setRooms(\r\n          data.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          }))\r\n        );\r\n      });\r\n  };\r\n  // Moment(new Date()).format('DD/MM/YYYY HH:mm:ss')\r\n  const onView = (item) => {\r\n    if (item.nameLease == \"\") {\r\n      setVisibleDraw(false);\r\n      message.warning(\"The room has not been rented !!!\", 1);\r\n    } else {\r\n      setVisibleDraw(true);\r\n      setInfoRoom(item);\r\n      const fetchData = async () => {\r\n        const db = firebase.firestore();\r\n        await db\r\n          .collection(\"users\")\r\n          .doc(idOwner)\r\n          .collection(\"rooms\")\r\n          .doc(item.id)\r\n          .collection(\"members\")\r\n          .onSnapshot((data) => {\r\n            setMember(\r\n              data.docs.map((doc) => ({\r\n                ...doc.data(),\r\n                id: doc.id,\r\n              }))\r\n            );\r\n          });\r\n      };\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n  const onUpdate = (values) => {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(dataEdit.id)\r\n      .set({\r\n        nameLease: values.nameLease,\r\n        leaseAt: values.leaseAt,\r\n        type: values.type,\r\n        key: dataEdit.key,\r\n        status: dataEdit.status,\r\n      })\r\n      .then(() => setVisible(false));\r\n  };\r\n  const handleCancel = () => {\r\n    setIsLease(false);\r\n    setIsEdit(false);\r\n    setVisible(false);\r\n  };\r\n  const onEdit = (item) => {\r\n    if (item.nameLease === \"\") {\r\n      message.warning(\"The room has not been rented !!!\", 1);\r\n    } else {\r\n      setIsEdit(true);\r\n      setVisible(true);\r\n      setDataEdit(item);\r\n    }\r\n  };\r\n  const onSaveLease = (values) => {\r\n    //console.log(values)\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(dataLease.id)\r\n      .set({\r\n        nameLease: values.nameLease,\r\n        leaseAt: values.leaseAt,\r\n        type: values.type,\r\n        key: dataLease.key,\r\n        status: dataLease.status,\r\n      })\r\n      .then(() => {\r\n        setVisible(false);\r\n        setDataLease([]);\r\n        setIsLease(false);\r\n      });\r\n  };\r\n  const onRefresh = (item) => {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(item.id)\r\n      .set({\r\n        nameLease: \"\",\r\n        leaseAt: \"\",\r\n        type: item.type,\r\n        key: item.key,\r\n        status: false,\r\n      })\r\n      .then(() => {\r\n        setVisible(false);\r\n      });\r\n  };\r\n  const onPaid = (item) => {\r\n    setInfoRoom({\r\n      ...infoRoom,\r\n      status: item.status == true ? false : true,\r\n    });\r\n    //console.log(item)\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(item.id)\r\n      .set({\r\n        nameLease: item.nameLease,\r\n        leaseAt: item.leaseAt,\r\n        type: item.type,\r\n        key: item.key,\r\n        status: item.status === true ? false : true,\r\n      });\r\n  };\r\n  const confirmDelete = (item) => {\r\n    //console.log(item)\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(item.id)\r\n      .delete();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .onSnapshot((data) => {\r\n        setRooms(\r\n          data.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          }))\r\n        );\r\n      });\r\n  };\r\n\r\n  const menuOptionAdd = (\r\n    <Menu>\r\n      <Menu.Item onClick={onAddVip}>VIP</Menu.Item>\r\n      <Menu.Item onClick={onAddNormal}>NORMAL</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 7,\r\n    },\r\n    wrapperCol: {\r\n      span: 17,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 7,\r\n      span: 16,\r\n    },\r\n  };\r\n  // info room mem\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"memName\",\r\n      key: \"memName\",\r\n    },\r\n    {\r\n      title: \"Phone\",\r\n      dataIndex: \"phone\",\r\n      key: \"phone\",\r\n    },\r\n    {\r\n      title: \"Gender\",\r\n      dataIndex: \"gender\",\r\n      key: \"gender\",\r\n    },\r\n    {\r\n      title: \"Start Date\",\r\n      dataIndex: \"startAt\",\r\n      key: \"startAt\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      width: 100,\r\n      render: (record) => (\r\n        <Space size=\"middle\">\r\n          <Popconfirm\r\n            placement=\"top\"\r\n            title={\"Are you sure ?\"}\r\n            onConfirm={() => confirmDeleteMem(record)}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button>\r\n              {\" \"}\r\n              <DeleteOutlined /> Delete\r\n            </Button>\r\n          </Popconfirm>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const onAddMember = () => {\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(infoRoom.id)\r\n      .collection(\"members\")\r\n      .add({\r\n        key: genid(),\r\n        memName: \"New member\",\r\n        startAt: \"\",\r\n        gender: \"\",\r\n        phone: \"\",\r\n      });\r\n  };\r\n  const onEditInfo = (info) => {\r\n    setInfoEdit(info);\r\n    setIsEditInfo(true);\r\n  };\r\n  const onSaveInfo = (values) => {\r\n    //console.log(values)\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(infoRoom.id)\r\n      .collection(\"members\")\r\n      .doc(infoEdit.id)\r\n      .set({\r\n        memName: values.memName,\r\n        startAt: values.startAt,\r\n        gender: values.gender,\r\n        key: infoEdit.key,\r\n        phone: values.phone,\r\n      })\r\n      .then(() => setIsEditInfo(false));\r\n  };\r\n  const confirmDeleteMem = async (record) => {\r\n    const db = firebase.firestore();\r\n    await db\r\n      .collection(\"users\")\r\n      .doc(idOwner)\r\n      .collection(\"rooms\")\r\n      .doc(infoRoom.id)\r\n      .collection(\"members\")\r\n      .doc(record.id)\r\n      .delete();\r\n  };\r\n  const infoMember = (value) => {\r\n    return isEditInfo == true ? (\r\n      <Form\r\n        layout=\"inline\"\r\n        size=\"large\"\r\n        initialValues={{\r\n          memName: value.memName,\r\n          phone: value.phone,\r\n          gender: value.gender,\r\n          startAt: value.startAt,\r\n        }}\r\n        onFinish={onSaveInfo}\r\n      >\r\n        <Form.Item\r\n          name=\"memName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input user name!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Name...\" style={{ width: 170 }} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"phone\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input phone!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Phone number...\" style={{ width: 113 }} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"gender\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input gender!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select style={{ width: 110 }}>\r\n            <Option value=\"Male\">Male</Option>\r\n            <Option value=\"Female\">Female</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"startAt\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input date!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Start date ...\" style={{ width: 130 }} />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Save\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    ) : (\r\n      <Row style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <Descriptions\r\n          title=\"Info Member\"\r\n          size=\"small\"\r\n          layout=\"horizontal\"\r\n          column={1}\r\n          bordered\r\n          style={{ width: 500 }}\r\n        >\r\n          <Descriptions.Item label=\"Name\">{value.memName}</Descriptions.Item>\r\n          <Descriptions.Item label=\"Phone number\">\r\n            {value.phone !== \"\" ? value.phone : \"Please update phone!\"}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"Gender\">\r\n            {value.gender !== \"\" ? value.gender : \"Please update gender!\"}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"Start at\">\r\n            {value.startAt !== \"\" ? value.startAt : \"Please update start date!\"}\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n\r\n        <Button style={{ marginRight: 20 }} onClick={() => onEditInfo(value)}>\r\n          Edit\r\n        </Button>\r\n      </Row>\r\n    );\r\n  };\r\n  return (\r\n    <Layout style={{ padding: \"0 24px 24px\" }}>\r\n      <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Room Management</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {loading == true ? (\r\n        <Row>\r\n          <Skeleton active />\r\n          <Skeleton active />\r\n          <Skeleton active />\r\n          <Skeleton active />\r\n        </Row>\r\n      ) : (\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            padding: 24,\r\n            margin: 0,\r\n            minHeight: 450,\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <Row\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              marginBottom: 20,\r\n            }}\r\n          >\r\n            <Dropdown overlay={menuOptionAdd} placement=\"bottomCenter\">\r\n              <Button>Add room</Button>\r\n            </Dropdown>\r\n            <Space>\r\n              <Select\r\n                style={{ width: 100 }}\r\n                defaultValue=\"All\"\r\n                onChange={orderFilter}\r\n              >\r\n                <Option value=\"\">All</Option>\r\n                <Option value=\"NORMAL\">NORMAL</Option>\r\n                <Option value=\"VIP\">VIP</Option>\r\n                <Option value=\"true\">Paid</Option>\r\n                <Option value=\"false\">Unpaid</Option>\r\n              </Select>\r\n              <Search\r\n                placeholder=\"Search ...\"\r\n                onSearch={(value) => setSearch(value)}\r\n                style={{ width: 300 }}\r\n              />\r\n            </Space>\r\n          </Row>\r\n\r\n          <Row>\r\n            {dataFilter.length == 0 ? (\r\n              <Empty\r\n                style={{ margin: \"auto\", width: 200, height: 200 }}\r\n                description={<strong>No rooms!</strong>}\r\n              />\r\n            ) : (\r\n              dataFilter.map((item) => (\r\n                <Col\r\n                  key={item.key}\r\n                  style={{ marginBottom: 20, marginRight: 10 }}\r\n                >\r\n                  <Card\r\n                    size=\"small\"\r\n                    title={\"Room \" + item.key}\r\n                    actions={[\r\n                      <BookOutlined\r\n                        key=\"setting\"\r\n                        onClick={() => onLease(item)}\r\n                      />,\r\n                      <EditOutlined key=\"edit\" onClick={() => onEdit(item)} />,\r\n                      <EyeOutlined onClick={() => onView(item)} />,\r\n                      <Popconfirm\r\n                        placement=\"top\"\r\n                        title={\"Are you sure ?\"}\r\n                        onConfirm={() => confirmDelete(item)}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                      >\r\n                        <DeleteOutlined />\r\n                      </Popconfirm>,\r\n                    ]}\r\n                    extra={\r\n                      item.status == true ? (\r\n                        <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\r\n                      ) : (\r\n                        <ExclamationCircleTwoTone twoToneColor=\"red\" />\r\n                      )\r\n                    }\r\n                    style={{ width: 250, maxHeight: 250, minHeight: 250 }}\r\n                  >\r\n                    <Descriptions title=\"Infomation Room\" column={1}>\r\n                      <Descriptions.Item\r\n                        label=\"Renter Name\"\r\n                        style={{ width: 150 }}\r\n                      >\r\n                        {item.nameLease}\r\n                      </Descriptions.Item>\r\n                      <Descriptions.Item\r\n                        label=\"Start Date\"\r\n                        style={{ width: 150 }}\r\n                      >\r\n                        {item.leaseAt}\r\n                      </Descriptions.Item>\r\n                      <Descriptions.Item label=\"Type\" style={{ width: 150 }}>\r\n                        {item.type}\r\n                      </Descriptions.Item>\r\n                    </Descriptions>\r\n                  </Card>\r\n                </Col>\r\n              ))\r\n            )}\r\n          </Row>\r\n        </Content>\r\n      )}\r\n      <Modal\r\n        title={\r\n          isEdit === true ? `Room ${dataEdit.key}` : `Room ${dataLease.key}`\r\n        }\r\n        visible={visible}\r\n        footer=\" \"\r\n        width=\"450px\"\r\n        onCancel={handleCancel}\r\n        afterClose={() => setDataShow([])}\r\n      >\r\n        {isEdit === true ? (\r\n          <Form\r\n            {...layout}\r\n            size=\"small\"\r\n            name=\"basic\"\r\n            onFinish={onUpdate}\r\n            initialValues={{\r\n              nameLease: dataEdit.nameLease,\r\n              leaseAt: dataEdit.leaseAt,\r\n              type: dataEdit.type,\r\n            }}\r\n          >\r\n            <Descriptions title=\"Infomation Room\" column={1} />\r\n            <Form.Item\r\n              label=\"Renter Name\"\r\n              name=\"nameLease\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input name\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Renter Name\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Start date\"\r\n              name=\"leaseAt\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input date\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Start date (DD/MM/YYYY) \" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input room types\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select style={{ width: 200 }}>\r\n                <Option value=\"NORMAL\">NORMAL</Option>\r\n                <Option value=\"VIP\">VIP</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" size=\"middle\" htmlType=\"submit\">\r\n                Update\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        ) : isLease === true ? (\r\n          <Form\r\n            {...layout}\r\n            size=\"small\"\r\n            name=\"basic\"\r\n            onFinish={onSaveLease}\r\n            initialValues={{\r\n              nameLease: dataLease.nameLease,\r\n              leaseAt: dataLease.leaseAt,\r\n              type: dataLease.type,\r\n            }}\r\n          >\r\n            <Descriptions title=\"Infomation Room\" column={1} />\r\n            <Form.Item\r\n              label=\"Renter Name\"\r\n              name=\"nameLease\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input name\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Renter Name\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Start date\" name=\"leaseAt\">\r\n              <Input placeholder=\"Start date ... \" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input room types\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select style={{ width: 200 }}>\r\n                <Option value=\"NORMAL\">NORMAL</Option>\r\n                <Option value=\"VIP\">VIP</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" size=\"middle\" htmlType=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        ) : (\r\n          <Descriptions title=\"Infomation Room\" column={1} bordered>\r\n            <Descriptions.Item label=\"Renter Name\">\r\n              {dataLease.nameLease}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Start Date\">\r\n              {dataLease.leaseAt}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Type\">{dataLease.type}</Descriptions.Item>\r\n          </Descriptions>\r\n        )}\r\n        {dataLease.nameLease !== \"\" ? (\r\n          <Button\r\n            style={{ float: \"right\", margin: 6 }}\r\n            onClick={() => onRefresh(dataLease)}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        ) : isEdit === true || isLease === true ? (\r\n          <Button\r\n            style={{ float: \"right\", margin: 6 }}\r\n            onClick={() => onRefresh(dataLease)}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            style={{ float: \"right\", margin: 6 }}\r\n            onClick={() => setIsLease(true)}\r\n          >\r\n            Lease\r\n          </Button>\r\n        )}\r\n\r\n        <Button\r\n          style={{ float: \"right\", margin: 6 }}\r\n          onClick={() => setVisible(false)}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Modal>\r\n      <Drawer\r\n        title={\"Infomation Room \" + infoRoom.key}\r\n        placement=\"right\"\r\n        closable={false}\r\n        onClose={() => setVisibleDraw(false)}\r\n        visible={visibleDraw}\r\n        width={750}\r\n      >\r\n        <Card\r\n          size=\"small\"\r\n          title={\"Room \" + infoRoom.key}\r\n          extra={\r\n            <Switch\r\n              checked={infoRoom.status == true ? true : false}\r\n              onChange={() => onPaid(infoRoom)}\r\n              checkedChildren=\"Paid\"\r\n              unCheckedChildren=\"Unpaid\"\r\n            />\r\n          }\r\n        >\r\n          <Descriptions\r\n            title=\"Infomation Room\"\r\n            column={1}\r\n            bordered\r\n            style={{ background: \"white\" }}\r\n          >\r\n            <Descriptions.Item label=\"Renter Name\">\r\n              {infoRoom.nameLease}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Start Date\">\r\n              {infoRoom.leaseAt}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Type\">{infoRoom.type}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Total members\">\r\n              {member.length + \" \"} members\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </Card>\r\n        <Divider>List members</Divider>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={member}\r\n          pagination={{ pageSize: 4 }}\r\n          size=\"small\"\r\n          title={() => <Button onClick={onAddMember}>Add member</Button>}\r\n          expandable={{\r\n            expandedRowRender: (record) => infoMember(record),\r\n          }}\r\n        />\r\n      </Drawer>\r\n    </Layout>\r\n  );\r\n};\r\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":17,"column":10,"nodeType":"71","messageId":"72","endLine":17,"endColumn":19},{"ruleId":"69","severity":1,"message":"73","line":17,"column":21,"nodeType":"71","messageId":"72","endLine":17,"endColumn":33},{"ruleId":"69","severity":1,"message":"74","line":18,"column":18,"nodeType":"71","messageId":"72","endLine":18,"endColumn":27},{"ruleId":"69","severity":1,"message":"75","line":5,"column":3,"nodeType":"71","messageId":"72","endLine":5,"endColumn":16},{"ruleId":"69","severity":1,"message":"76","line":9,"column":44,"nodeType":"71","messageId":"72","endLine":9,"endColumn":52},{"ruleId":"69","severity":1,"message":"77","line":9,"column":59,"nodeType":"71","messageId":"72","endLine":9,"endColumn":71},{"ruleId":"69","severity":1,"message":"78","line":10,"column":10,"nodeType":"71","messageId":"72","endLine":10,"endColumn":16},{"ruleId":"69","severity":1,"message":"79","line":10,"column":18,"nodeType":"71","messageId":"72","endLine":10,"endColumn":23},{"ruleId":"69","severity":1,"message":"80","line":10,"column":31,"nodeType":"71","messageId":"72","endLine":10,"endColumn":41},{"ruleId":"69","severity":1,"message":"81","line":15,"column":18,"nodeType":"71","messageId":"72","endLine":15,"endColumn":28},{"ruleId":"69","severity":1,"message":"82","line":19,"column":16,"nodeType":"71","messageId":"72","endLine":19,"endColumn":24},{"ruleId":"83","severity":1,"message":"84","line":84,"column":21,"nodeType":"85","messageId":"86","endLine":84,"endColumn":23},{"ruleId":"69","severity":1,"message":"87","line":41,"column":9,"nodeType":"71","messageId":"72","endLine":41,"endColumn":16},{"ruleId":"69","severity":1,"message":"88","line":43,"column":10,"nodeType":"71","messageId":"72","endLine":43,"endColumn":20},{"ruleId":"69","severity":1,"message":"89","line":43,"column":22,"nodeType":"71","messageId":"72","endLine":43,"endColumn":35},{"ruleId":"69","severity":1,"message":"90","line":45,"column":10,"nodeType":"71","messageId":"72","endLine":45,"endColumn":18},{"ruleId":"69","severity":1,"message":"81","line":52,"column":19,"nodeType":"71","messageId":"72","endLine":52,"endColumn":29},{"ruleId":"83","severity":1,"message":"91","line":66,"column":15,"nodeType":"85","messageId":"86","endLine":66,"endColumn":17},{"ruleId":"83","severity":1,"message":"91","line":66,"column":33,"nodeType":"85","messageId":"86","endLine":66,"endColumn":35},{"ruleId":"83","severity":1,"message":"91","line":78,"column":22,"nodeType":"85","messageId":"86","endLine":78,"endColumn":24},{"ruleId":"83","severity":1,"message":"91","line":90,"column":22,"nodeType":"85","messageId":"86","endLine":90,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":161,"column":6,"nodeType":"94","endLine":161,"endColumn":8,"suggestions":"95"},{"ruleId":"83","severity":1,"message":"91","line":207,"column":24,"nodeType":"85","messageId":"86","endLine":207,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":303,"column":27,"nodeType":"85","messageId":"86","endLine":303,"endColumn":29},{"ruleId":"83","severity":1,"message":"91","line":454,"column":23,"nodeType":"85","messageId":"86","endLine":454,"endColumn":25},{"ruleId":"83","severity":1,"message":"91","line":553,"column":16,"nodeType":"85","messageId":"86","endLine":553,"endColumn":18},{"ruleId":"83","severity":1,"message":"91","line":601,"column":32,"nodeType":"85","messageId":"86","endLine":601,"endColumn":34},{"ruleId":"83","severity":1,"message":"91","line":633,"column":35,"nodeType":"85","messageId":"86","endLine":633,"endColumn":37},{"ruleId":"83","severity":1,"message":"91","line":840,"column":40,"nodeType":"85","messageId":"86","endLine":840,"endColumn":42},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'showAbout' is assigned a value but never used.","Identifier","unusedVar","'setShowAbout' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","'SettingFilled' is defined but never used.","'Checkbox' is defined but never used.","'notification' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useHistory' is defined but never used.","'setIdOwner' is assigned a value but never used.","'setOwner' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'history' is assigned a value but never used.","'visiblePop' is assigned a value but never used.","'setVisiblePop' is assigned a value but never used.","'dataShow' is assigned a value but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'idOwner' and 'rooms.length'. Either include them or remove the dependency array.","ArrayExpression",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [idOwner, rooms.length]",{"range":"101","text":"102"},[4214,4216],"[idOwner, rooms.length]"]